dlgForm("a:TXT" = "iets"")
dlgForm("a:TXT" = "iets")
dlgForm(list("a:TXT" = "iets"), "test")
dlgForm(list("a:H" = "iets"), "test")
library(pgGui)
library(pggui)
createGui
createGUI
detach("package:svDialogs", unload=TRUE)
detach("package:svDialogstcltk", unload=TRUE)
detach("package:svGUI", unload=TRUE)
remove.packages("svDialogstcltk")
remove.packages("svMisc")
remove.packages("svDialogs")
remove.packages("svGUI")
help(tcl)
createGUI
setwd
setwd("~/R")
source("createGUI.R")
source("createGUI.R")
source("createGUI.R")
source('~/R/createGUI.R')
source('~/R/createGUI.R')
source('~/R/createGUI.R')
createGUI()
source('~/R/createGUI.R')
createGUI()
createGUI(parameterList = c("Test", "Hidden", "test", ""))
createGUI(parameterList = rbind(c("Test", "Hidden", "test", ""))
)
source('~/R/createGUI.R')
createGUI(parameterList = rbind(c("Test", "Hidden", "test", ""))
)
createGUI(parameterList = rbind(c("Test", "Hidden", "", ""))
)
createGUI(parameterList = rbind(c("User Name", "String"", "", "")", c("Test", "Hidden", "", ""))
createGUI(parameterList = rbind(c("Test", "Hidden", "", "")) )
createGUI(parameterList = rbind(c("Test", "String", "", ""), c("Test2", "Hidden", "", "") ) )
createGUI(parameterList = rbind(c("Test", "String", "", ""), c("Test2", "Hidden", "", "") ) )
createGUI(parameterList = rbind(c("Test", "String", "", ""), c("Test2", "Hidden", "", "") ) )
source('~/R/createGUI.R')
createGUI(parameterList = rbind(c("Test", "String", "", ""), c("Test2", "Hidden", "", "") ) )
help(tkdialog)
help(tkdialog)
tkdialog()
tkpopup()
tt = tktoplevel()
aTextEntry = tcl("entry", paste("ets", ".", aCounter,
sep = ""), show = "*", width = 50, textvariable = Name)
aTextEntry = tcl(Ã«ntry","iets"
aTextEntry = tcl("ntry","iets")
aTextEntry = tcl("entry","iets")
tktoplevel(text = "User Name")
tt = tktoplevel()
tkwidget(tt, text = "Test")
tcl("label", "test")
tcl(tt, "label", "test")
tcl(text = "test"")"
tcl(text = "test")
tcl(text = "test")
help(tkpack)
tkdoalog()
tkdialog()
tkdialog(text =  "do")
tkdialog(tt, "test", text =  "do")
tkdialog("test", text =  "do")
tkwidget
help(tkwidget)
tt = tktoplevel()
tktext(tt, "text")
tktext(tt)
a = tktext(tt, label = "iets")
a = tktext(tt, string = "iets")
e = tkentry(tt, textvariable = "text" )
tkpack(e)
tt = tktopleve()
tt = tktoplevel()
l = tklabel(text = "UserName")
l = tklabel(tt, text = "UserName")
e = tkentry(tt, textvariable = "rdwijn@amgene.com" )
tcpack(l)
tkpack(l)
tkpack(e)
e = tkentry(tt,text = "text" )
e = tkentry(tt,text = "text" )
tkpack(e)\
tkpack(e)
aText = tclVar(init = "text")
source('~/R/logindialog.R')
source('~/R/logindialog.R')
source('~/R/logindialog.R')
source('~/R/logindialog.R')
source('~/R/logindialog.R')
source('~/R/logindialog.R')
source('~/R/logindialog.R')
source('~/R/logindialog.R')
source('~/R/logindialog.R')
help(tktoplevel)
source('~/R/logindialog.R')
source('~/R/logindialog.R')
source('~/R/logindialog.R')
source('~/R/logindialog.R')
tclvalue(1)
tclvalue(entry.user)
source('~/R/logindialog.R')
tclvalue(entry.user)
entry.user
help(tkGet)
userVal
tclvalue(userVal)
source('~/R/logindialog.R')
tclvalue(userVal)
tclvalue(userVal)
source('~/R/logindialog.R')
source('~/R/logindialog.R')
login()
source('~/R/logindialog.R')
login()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/R/logindialog.R')
login()
source('~/R/logindialog.R')
login()
source('~/R/logindialog.R')
login()
source('~/R/logindialog.R')
login()
source.with.encoding('~/R/logindialog.R', encoding='UTF-8')
login()
source('~/R/logindialog.R')
login()
source('~/R/logindialog.R')
login()
help(environment)
source('~/R/logindialog.R')
login
login()
source('~/R/logindialog.R')
login()
fix(e)
fix(onok)
source('~/R/logindialog.R')
source('~/R/logindialog.R')
login()
source('~/R/logindialog.R')
login()
source('~/R/logindialog.R')
login.dialog()
credentials
cre = login.dialog()
source('~/R/logindialog.R')
cre = login.dialog()
cre
cre = login.dialog()
cre
source('~/R/logindialog.R')
cre = login.dialog()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/R/logindialog.R')
cre = login.dialog()
source('~/R/logindialog.R')
cre = login.dialog()
cre
userVal
tt = tktoplevel()
label.user = tklabel(tt, text = "User Name")
userVal = tclVar(init = credentials$user)
entry.user =  tkentry(tt, textvariable = userVal)
label.pw = tklabel(tt, text = "Password")
pwVal = tclVar(init = credentials$pw)
entry.pw = tkentry(tt, textvariable = pwVal, show = "*")
button.ok = tkbutton(tt, text = "OK", command = onok)
tkpack(label.user)
tkpack(entry.user)
tkpack(label.pw)
tkpack(entry.pw)
tkpack(button.ok)
source('~/R/logindialog.R')
source('~/R/logindialog.R')
entry.user
entry.user("textvariable")
entry.user$textvariable
attr(entry.user)
attributes(entry.user)
entry.pw("textvariable")
entry.pw("textvariable")
source('~/R/logindialog.R')
source('~/R/logindialog.R')
source('~/R/logindialog.R')
entry.user
entry.user(tt)
tclVar(entry.user)
tclVar(entry.user, "textvariable")
tclValue(entry.user)
tclvalue(entry.user)
tclvalue(entry.pw)
tclvalue(tt)
source('~/R/createGUI.R')
source('~/R/logindialog.R')
tclvalue(entry.user)
tclvalue(entry.user, "textvariable")
help(tclvalue)
tclvalue(tt)
source('~/R/logindialog.R')
source('~/.active-rstudio-document')
source('~/R/logindialog.R')
tclvalue(entry.user)
tclVar(entry.user)
userVal
tclvalue(userVal)
source('~/.active-rstudio-document')
tclvalue(userVal)
tclvalue(userVal)
tclvalue(userVal)
tclvalue(userVal)
fix(pwVal)
tclvalue(entry.pw)
tclvalue(entry.pw, userVal)
tclvalue(entry.pw, textvariable)
tclvalue(entry.pw)
print(entry.pw)
get(entry.pw)
get(entry.pw, "textvariable")
as.character(entry.pw)
help(tkget)
tkget(entry.user)
tkget(entry.user, "textvariable")
tkget(entry.pw, "textvariable")
entry.pw
tkget(entry.pw, "textvariable")
tkget(entry.pw)
tkget(tt)
tclvalue(entry.user)
tclvalue(entry.user, "text")
tclvalue(tt)
tkvalue
tkvalue()
tkcget
tkcget(entry.pw)
tkcget(widget = entry.pw)
tclvalue(tt, entry.pw)
userVal
userVal$init
attributes(entry.pw)
summary(entry.pw)
textvariable(entry.pw)
tkget("textvariable", entry.pw)
tkget(textvariable, entry.pw)
cget
tkcget
source('~/R/logindialog.R')
tkcget(entry.user, "-text")
tkcget(entry.user, "-textvariable")
tkcget("-textvariable")
tcl(paste("cget", entry.user, "-textvariable"   ))
tcl("tcl entry.user -textvariable")
tcl("cget entry.user -textvariable")
tcl(paste("cget", entry.user, "-text"   ))
source('~/R/logindialog.R')
fix(entry.pw)
entry.pw$ID
entry.pw$env
tkget(entry.pw$env)
help(environment)
source('~/R/logindialog.R')
tkvalue
tkval
tkget
tkget(entry.user, "textvariable")
tkget(entry.user, "text")
tkget(tt, entry.user, "text")
tkcget(tt, entry.user, "text")
tclvalue(entry.user)
tclvalue(tt)
tclvalue(userVal)
tclvalue(userVal)
tclvalue(pwVal)
tclvalue(pwVal)
source('~/R/logindialog.R')
tclvalue(pwVal)
source('~/R/logindialog.R')
tclvalue(pwVal)
source('~/R/logindialog.R')
credentials
source('~/R/logindialog.R')
source('~/R/logindialog.R')
cre = login.dailog()
cre = login.dialog()
cre
install.packages("svDialogs")
library(svDialogs)
dlgMessage("Need to download form the pamcloud")
source('~/R/logindialog.R')
source('~/R/logindialog.R')
url = "https://pamcloud.pamgene.com/jackrabbit/repository/default/PamCloud/PamGene/Users/Rik/packages/pgMulticore_1.0.zip"
source('~/140-700 Bioinformatics/pamapps/packages/bn/logindialog.r')
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
dlPamCloudFile(url)
library(tcltk)
library(tcltk)
dlPamCloudFile(url)
library(RCurl)
library(Rcurl)
install.packages("RCurl")
library(Rcurl)
library(RCurl)
install.packages("RCurl")
install.packages("RCurl")
dlPamCloudFile(url)
library(tcltk)
dlPamCloudFile(url)
getBinaryURL
getBinaryURL()
library(RCurl)
dlPamCloudFile(url)
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
dlPamCloudFile(url)
aFile = dlPamCloudFile(url)
aFile = dlPamCloudFile(url)
aFile
aFile = dlPamCloudFile(url)
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
aFile = dlPamCloudFile(url)
aFile
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
source('~/140-700 Bioinformatics/pamapps/packages/bn/logindialog.r')
aFile = dlPamCloudFile(url)
library(tcltk)
library(RCurl)
aFile = dlPamCloudFile(url)
url = "https://pamcloud.pamgene.com/jackrabbit/repository/default/PamCloud/PamGene/Users/Rik/packages/pgMulticore_1.0.zip"
url
aFile = dlPamCloudFile(url)
aFile
aFile = dlPamCloudFile(url)
source('~/140-700 Bioinformatics/pamapps/packages/bn/logindialog.r')
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
url = "https://pamcloud.pamgene.com/jackrabbit/repository/default/PamCloud/PamGene/Users/Rik/packages/pgMulticore_1.0.zip"
library(tcltk)
library(RCurl)
aFile = dlPamCloudFile(url)
aFile
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
aFile = dlPamCloudFile(url)
aFile
as.character(aFile)
help(getBinaryFile)
help(getBinaryURL)
rawToChar(aFile)
str =  "aStr"
str[[1]]
str = c("package1", "package2")
str[[1]]
str[[2]]
str[1
str[
STR[1]
str[1]
class(str)
library(RCurl)
help(getBinaryURL)
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
source('~/140-700 Bioinformatics/pamapps/packages/bn/logindialog.r')
library(RCulr)
library(RCurl)
library(tcltk)
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
url = "https://pamcloud.pamgene.com/jackrabbit/repository/default/PamCloud/PamGene/Users/Rik/packages/pgMulticore_1.0.zip"
PamCloud.getBinaryURL(url)
help(tkfocus)
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
PamCloud.getBinaryURL(url)
url = "https://pamcloud.pamgene.com/jackrabbit/repository/default/PamCloud/PamGene/Users/Rik/packages/pgMulticore_1.0.zip"
PamCloud.getBinaryURL()
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
PamCloud.getBinaryURL()
aFile = PamCloud.getBinaryURL()
aFile
raw2char(aFile)
rawToChar(aFile)
rawToChar(aFile[1:100])
rawToChar(aFile[1:10])
rawToChar(aFile[1:25])
rawToChar(aFile[1:35])
rawToChar(aFile[1:31])
rawToChar(aFile[1:33])
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
print(PamCloud.checkAccess())
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
print(PamCloud.checkAccess())
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
print(PamCloud.checkAccess())
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
print(PamCloud.checkAccess())
aFile
rawToChar(aFile)
rawToChar(aFile)[1:33]
a = rawToChar(aFile)[1:33]
a = rawToChar(aFile)
class(a)
help(subs)
help(sub)
help(substring)
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
print(PamCloud.checkAccess())
print(PamCloud.checkAccess())
help(path)
url
basename(url)
dirname(url)
help(exists)
file.exists("C:\\temp")
help(mkdir)
getwd()
help(writebin)
help(writeBin)
aFile
writeBin(aFile, "test.txt")
help(install.packages())
help(install.packages)
writeBin(aFile, "test.txt")
help(writeBin)
help(install.packages)
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
url = "https://pamcloud.pamgene.com/jackrabbit/repository/default/PamCloud/BioNavigator/Resources/pggui_2.0.zip"
PamCloud.installPackage(url)
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
source('~/140-700 Bioinformatics/pamapps/packages/bn/PamCloudInstall.R')
PamCloud.installPackage(url)
PamCloud.installPackage("https://pamcloud.pamgene.com/jackrabbit/repository/default/PamCloud/BioNavigator/Resources/readme.txt")
help(install.packages())
help(install.packages
)
library(pgMulticore)
help(is.loaded)
is.loaded(plyr)
is.loaded("plyr")
ddply
help(library)
library(pgMulticore)
PamCloud.CheckAccess()
PamCloud.checkAccess()
source('~/140-700 Bioinformatics/pamapps/packages/pgMulticore/exam.R')
help(checkpack)
library(PamCloud)
checkpack(plyr)
checkpack("plyr")
library(pgMulticore)
library(pgMulticore)
source('~/140-700 Bioinformatics/pamapps/packages/pgMulticore/exam.R')
library(pgMultiCore)
library(pgMulticore)
library(tcltk)
dlgMessage("Need")
help(dlg)
help(dlgMsg
)
tkmessageBox("help")
tkmessageBox(text = "help")
tkmessageBox(message = "help")
source('~/140-700 Bioinformatics/pamapps/components/Vini fit operator/impl/vini.r')
source('~/140-700 Bioinformatics/pamapps/components/Vini fit operator/impl/vini.r')
source('~/140-700 Bioinformatics/pamapps/components/Vini fit operator/impl/vini.r')
source('~/140-700 Bioinformatics/pamapps/components/Vini fit operator/impl/vini.r')
detach("package:pgMulticore", unload=TRUE)
remove.packages("pgMulticore")
remove.packages("circular")
installed.packages
installed.packages()
"rstudio" %in% installed.packages()
library(pgMulticore)
library(pgMulticore)
library(parallel)
help(detectCores())
help(detectCores)
library(pgMulticore)
library(pgMulticore)
detach("package:pgMulticore", unload=TRUE)
remove.packages("pgMulticore")
f = formula(Y  3*x +1)
f = formula(Y ~3*x +1)
f
f(1)
f
attr(f)
terms(f)
term.labels(f)
help(formula)
devtools::install_bitbucket("bnoperator/pgmulticore")
remove.packages("pgMulticore", lib="~/R/win-library/3.2")
remove.packages("pgMulticore", lib="~/R/win-library/3.2")
devtools::install_bitbucket("bnoperator/pgmulticore")
remove.packages("pgMulticore")
remove.packages("foreach")
checkpack("pgMulticore")
source("C:\\Users\\rdwijn\\Documents\\140-700 Bioinformatics\\pamapps\\components\\EXpTime Scaling\\operator\\impl\\linreg.r")
"https://bitbucket.org/bnoperator/pgmulticore/src/1ddc946870ae/R/doMultiCore.r"
source("https://bitbucket.org/bnoperator/pgmulticore/src/1ddc946870ae/R/doMultiCore.r")
https://bitbucket.org/bnoperator/pgmulticore/raw/R/doMultiCore.r
source("https://bitbucket.org/bnoperator/pgmulticore/raw/R/doMultiCore.r")
library(parallel)
library(doParallel)
library(foreach)
library(plyr)
registerDoParallel()
